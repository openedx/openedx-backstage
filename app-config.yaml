app:
  title: Open edX Backstage
  baseUrl: http://localhost:3000

organization:
  name: Open edX Project

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007

  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    # config options: https://node-postgres.com/api/client
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # Backstage docs for how to generate these: https://backstage.io/docs/integrations/github/github-apps
      # We also have more specific docs in `docs/source/how-tos/create-github-credentials.rst`
      apps:
        - appId: ${AUTH_GITHUB_APP_ID}
          clientId: ${AUTH_GITHUB_CLIENT_ID}
          clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
          privateKey: ${AUTH_GITHUB_PRIVATE_KEY}
          # Webhooks are disabled because we don't make use of them but backstage still needs a non-empty string.
          # If we ever start using this, we should pull this value from an environment variable like the others.
          webhookSecret: not-a-secret

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  # The oauth settings for development expect localhost for referrer and
  # callbacks
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
    # See https://backstage.io/docs/auth/guest/provider
    # guest: {}
    guest: null

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  # Docs here:https://backstage.io/docs/integrations/github/discovery
  # Requires
  # yarn add --cwd packages/backend @backstage/plugin-catalog-backend-module-github
  providers:
    github:
      mainBranches:
        organization: 'openedx'
        filters:
          branch: 'main'
        schedule: # same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 120 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
      masterBranches:
        organization: 'openedx'
        filters:
          branch: 'master'
        schedule: # same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 120 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
      extraCatalogs:
        organization: 'openedx'
        catalogPath: 'catalog-extra/**/catalog-info.yaml'
        filters:
          branch: 'main'
          repository: 'openedx-backstage'
        schedule: # same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 120 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
    githubOrg:
      id: ghUsers
      githubUrl: https://github.com
      orgs:
        - openedx
      schedule:
        initialDelay: { seconds: 30 }
        frequency: { hours: 1 }
        timeout: { minutes: 50 }

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
